var annotated_dup =
[
    [ "AgentConflict", "classAgentConflict.html", "classAgentConflict" ],
    [ "AStar", "classAStar.html", "classAStar" ],
    [ "AStarProblem", "classAStarProblem.html", "classAStarProblem" ],
    [ "ConflictBasedSearch", "classConflictBasedSearch.html", "classConflictBasedSearch" ],
    [ "ConflictTreeNode", "classConflictTreeNode.html", "classConflictTreeNode" ],
    [ "ConflictTreeNodeComparator", "classConflictTreeNodeComparator.html", "classConflictTreeNodeComparator" ],
    [ "CooperativeAStar", "classCooperativeAStar.html", "classCooperativeAStar" ],
    [ "EdgeConstraint", "classEdgeConstraint.html", "classEdgeConstraint" ],
    [ "GeneralAStar", "classGeneralAStar.html", "classGeneralAStar" ],
    [ "Graph", "classGraph.html", "classGraph" ],
    [ "Group", "classGroup.html", "classGroup" ],
    [ "GroupConflict", "classGroupConflict.html", "classGroupConflict" ],
    [ "HardEdgeConstraintEqual", "structHardEdgeConstraintEqual.html", "structHardEdgeConstraintEqual" ],
    [ "HardEdgeConstraintHash", "structHardEdgeConstraintHash.html", "structHardEdgeConstraintHash" ],
    [ "HardVertexConstraintEqual", "structHardVertexConstraintEqual.html", "structHardVertexConstraintEqual" ],
    [ "HardVertexConstraintHash", "structHardVertexConstraintHash.html", "structHardVertexConstraintHash" ],
    [ "Heuristic", "classHeuristic.html", "classHeuristic" ],
    [ "IndependenceDetection", "classIndependenceDetection.html", "classIndependenceDetection" ],
    [ "ManhattanHeuristic", "classManhattanHeuristic.html", "classManhattanHeuristic" ],
    [ "MICheuristic", "classMICheuristic.html", "classMICheuristic" ],
    [ "MICheuristic2", "classMICheuristic2.html", "classMICheuristic2" ],
    [ "MIOCheuristic", "classMIOCheuristic.html", "classMIOCheuristic" ],
    [ "MIOCheuristic2", "classMIOCheuristic2.html", "classMIOCheuristic2" ],
    [ "MultiAgentProblem", "classMultiAgentProblem.html", "classMultiAgentProblem" ],
    [ "Node", "classNode.html", "classNode" ],
    [ "NodeComparator", "classNodeComparator.html", "classNodeComparator" ],
    [ "ODMultiAgentAStarProblem", "classODMultiAgentAStarProblem.html", "classODMultiAgentAStarProblem" ],
    [ "ODMultiAgentAStarProblemWithConstraints", "classODMultiAgentAStarProblemWithConstraints.html", "classODMultiAgentAStarProblemWithConstraints" ],
    [ "ODMultiAgentSpaceTimeState", "classODMultiAgentSpaceTimeState.html", "classODMultiAgentSpaceTimeState" ],
    [ "ODMultiAgentState", "classODMultiAgentState.html", "classODMultiAgentState" ],
    [ "OptimalDistanceHeuristic", "classOptimalDistanceHeuristic.html", "classOptimalDistanceHeuristic" ],
    [ "Parser", "classParser.html", "classParser" ],
    [ "PointerGroupEquality", "structPointerGroupEquality.html", "structPointerGroupEquality" ],
    [ "PointerGroupHasher", "structPointerGroupHasher.html", "structPointerGroupHasher" ],
    [ "Problem", "classProblem.html", "classProblem" ],
    [ "ReverseResumableAStar", "classReverseResumableAStar.html", "classReverseResumableAStar" ],
    [ "SetOfPointersEquality", "structSetOfPointersEquality.html", "structSetOfPointersEquality" ],
    [ "SetOfPointersHasher", "structSetOfPointersHasher.html", "structSetOfPointersHasher" ],
    [ "SICheuristic", "classSICheuristic.html", "classSICheuristic" ],
    [ "SimpleIndependenceDetection", "classSimpleIndependenceDetection.html", "classSimpleIndependenceDetection" ],
    [ "SingleAgentAStarProblem", "classSingleAgentAStarProblem.html", "classSingleAgentAStarProblem" ],
    [ "SingleAgentAStarProblemWithConstraints", "classSingleAgentAStarProblemWithConstraints.html", "classSingleAgentAStarProblemWithConstraints" ],
    [ "SingleAgentProblem", "classSingleAgentProblem.html", "classSingleAgentProblem" ],
    [ "SingleAgentSpaceTimeState", "classSingleAgentSpaceTimeState.html", "classSingleAgentSpaceTimeState" ],
    [ "SingleAgentState", "classSingleAgentState.html", "classSingleAgentState" ],
    [ "SIOCheuristic", "classSIOCheuristic.html", "classSIOCheuristic" ],
    [ "SoftEdgeConstraintEqual", "structSoftEdgeConstraintEqual.html", "structSoftEdgeConstraintEqual" ],
    [ "SoftEdgeConstraintHash", "structSoftEdgeConstraintHash.html", "structSoftEdgeConstraintHash" ],
    [ "SoftVertexConstraintEqual", "structSoftVertexConstraintEqual.html", "structSoftVertexConstraintEqual" ],
    [ "SoftVertexConstraintHash", "structSoftVertexConstraintHash.html", "structSoftVertexConstraintHash" ],
    [ "Solution", "classSolution.html", "classSolution" ],
    [ "StandardMultiAgentAStarProblem", "classStandardMultiAgentAStarProblem.html", "classStandardMultiAgentAStarProblem" ],
    [ "StandardMultiAgentAStarProblemWithConstraints", "classStandardMultiAgentAStarProblemWithConstraints.html", "classStandardMultiAgentAStarProblemWithConstraints" ],
    [ "StandardMultiAgentSpaceTimeState", "classStandardMultiAgentSpaceTimeState.html", "classStandardMultiAgentSpaceTimeState" ],
    [ "StandardMultiAgentState", "classStandardMultiAgentState.html", "classStandardMultiAgentState" ],
    [ "State", "classState.html", "classState" ],
    [ "StateEquality", "structStateEquality.html", "structStateEquality" ],
    [ "StateHasher", "structStateHasher.html", "structStateHasher" ],
    [ "VertexConstraint", "classVertexConstraint.html", "classVertexConstraint" ]
];